process {
    withName: 'NFCORE_CUTANDRUN:CUTANDRUN:ALIGN_BOWTIE2:BOWTIE2_ALIGN' {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 48.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h    * task.attempt, 'time'    ) }
    }
}
process {
    withName: 'NFCORE_CUTANDRUN:CUTANDRUN:ALIGN_BOWTIE2:BOWTIE2_SPIKEIN_ALIGN' {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 48.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h    * task.attempt, 'time'    ) }
    }
}
process {
    withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PREPARE_PEAKCALLING:BEDTOOLS_SORT' {
        cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory = { check_max( 16.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h    * task.attempt, 'time'    ) }
    }
}
process {
  withName: 'NFCORE_CUTANDRUN:CUTANDRUN:CALCULATE_FRIP' {
      cpus  = { check_max( 6   * task.attempt, 'cpus'  ) }
      memory = { check_max( 54.GB * task.attempt, 'memory' ) }
      time  = { check_max( 10.h  * task.attempt, 'time'  ) }
    }
}
process {
  withName: 'NFCORE_CUTANDRUN:CUTANDRUN:FASTQC_TRIMGALORE:TRIMGALORE' {
      cpus  = { check_max( 6   * task.attempt, 'cpus'  ) }
      memory = { check_max( 54.GB * task.attempt, 'memory' ) }
      time  = { check_max( 10.h  * task.attempt, 'time'  ) }
    }
}
process {
  withName: 'NFCORE_CUTANDRUN:CUTANDRUN:GENERATE_REPORTS' {
    cpus   = '1'
    memory = '60.GB'
    time   = '10.h'
  }
}
process {
  withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEEPTOOLS_PLOTHEATMAP_PEAKS' {
      cpus  = { check_max( 6   * task.attempt, 'cpus'  ) }
      memory = { check_max( 54.GB * task.attempt, 'memory' ) }
      time  = { check_max( 10.h  * task.attempt, 'time'  ) }
    }
}
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
